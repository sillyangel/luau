<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="1200" height="304" onload="init(evt)" version="1.1" viewBox="0 0 1200 304"><defs><linearGradient id="background" x1="0" x2="0" y1="0" y2="1"><stop offset="5%" stop-color="#eee"/><stop offset="95%" stop-color="#eeeeb0"/></linearGradient></defs><style type="text/css">text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); } #search, #ignorecase { opacity:0.1; cursor:pointer; } #search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; } #subtitle { text-anchor:middle; font-color:rgb(160,160,160); } #title { text-anchor:middle; font-size:17px} #unzoom { cursor:pointer; } #frames &gt; *:hover { stroke:black; stroke-width:0.5; cursor:pointer; } .hide { display:none; } .parent { opacity:0.5; }</style><script type="text/ecmascript"><![CDATA[
    "use strict";
    var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
    function init(evt) {
        details = document.getElementById("details").firstChild;
        searchbtn = document.getElementById("search");
        ignorecaseBtn = document.getElementById("ignorecase");
        unzoombtn = document.getElementById("unzoom");
        matchedtxt = document.getElementById("matched");
        svg = document.getElementsByTagName("svg")[0];
        searching = 0;
        currentSearchTerm = null;
    }

    window.addEventListener("click", function(e) {
        var target = find_group(e.target);
        if (target) {
            if (target.nodeName == "a") {
                if (e.ctrlKey === false) return;
                e.preventDefault();
            }
            if (target.classList.contains("parent")) unzoom();
            zoom(target);
        }
        else if (e.target.id == "unzoom") unzoom();
        else if (e.target.id == "search") search_prompt();
        else if (e.target.id == "ignorecase") toggle_ignorecase();
    }, false)

    // mouse-over for info
    // show
    window.addEventListener("mouseover", function(e) {
        var target = find_group(e.target);
        if (target) details.nodeValue = g_to_text(target);
    }, false)

    // clear
    window.addEventListener("mouseout", function(e) {
        var target = find_group(e.target);
        if (target) details.nodeValue = ' ';
    }, false)

    // ctrl-F for search
    window.addEventListener("keydown",function (e) {
        if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
            e.preventDefault();
            search_prompt();
        }
    }, false)

    // ctrl-I to toggle case-sensitive search
    window.addEventListener("keydown",function (e) {
        if (e.ctrlKey && e.keyCode === 73) {
            e.preventDefault();
            toggle_ignorecase();
        }
    }, false)

    // functions
    function find_child(node, selector) {
        var children = node.querySelectorAll(selector);
        if (children.length) return children[0];
        return;
    }
    function find_group(node) {
        var parent = node.parentElement;
        if (!parent) return;
        if (parent.id == "frames") return node;
        return find_group(parent);
    }
    function orig_save(e, attr, val) {
        if (e.attributes["_orig_" + attr] != undefined) return;
        if (e.attributes[attr] == undefined) return;
        if (val == undefined) val = e.attributes[attr].value;
        e.setAttribute("_orig_" + attr, val);
    }
    function orig_load(e, attr) {
        if (e.attributes["_orig_"+attr] == undefined) return;
        e.attributes[attr].value = e.attributes["_orig_" + attr].value;
        e.removeAttribute("_orig_"+attr);
    }
    function g_to_text(e) {
        var text = find_child(e, "details").firstChild.nodeValue;
        return (text)
    }
    function g_to_func(e) {
        var child = find_child(e, "rawtext");
        return child ? child.textContent : null;
    }
    function update_text(e) {
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) -3;
        var txt = find_child(e, "rawtext").textContent.replace(/\([^(]*\)$/,"");
        t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

        // Smaller than this size won't fit anything
        if (w < 2 * 12 * 0.59) {
            t.textContent = "";
            return;
        }

        t.textContent = txt;
        // Fit in full text width
        if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
            return;

        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
        t.textContent = "";
    }

    // zoom
    function zoom_reset(e) {
        if (e.attributes != undefined) {
            orig_load(e, "x");
            orig_load(e, "width");
        }
        if (e.childNodes == undefined) return;
        for (var i = 0, c = e.childNodes; i < c.length; i++) {
            zoom_reset(c[i]);
        }
    }
    function zoom_child(e, x, ratio) {
        if (e.attributes != undefined) {
            if (e.attributes.x != undefined) {
                orig_save(e, "x");
                e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
                if (e.tagName == "text")
                    e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
            }
            if (e.attributes.width != undefined) {
                orig_save(e, "width");
                e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
            }
        }

        if (e.childNodes == undefined) return;
        for (var i = 0, c = e.childNodes; i < c.length; i++) {
            zoom_child(c[i], x - 10, ratio);
        }
    }
    function zoom_parent(e) {
        if (e.attributes) {
            if (e.attributes.x != undefined) {
                orig_save(e, "x");
                e.attributes.x.value = 10;
            }
            if (e.attributes.width != undefined) {
                orig_save(e, "width");
                e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
            }
        }
        if (e.childNodes == undefined) return;
        for (var i = 0, c = e.childNodes; i < c.length; i++) {
            zoom_parent(c[i]);
        }
    }
    function zoom(node) {
        var attr = find_child(node, "rect").attributes;
        var width = parseFloat(attr.width.value);
        var xmin = parseFloat(attr.x.value);
        var xmax = parseFloat(xmin + width);
        var ymin = parseFloat(attr.y.value);
        var ratio = (svg.width.baseVal.value - 2 * 10) / width;

        // XXX: Workaround for JavaScript float issues (fix me)
        var fudge = 0.0001;

        unzoombtn.classList.remove("hide");

        var el = document.getElementById("frames").children;
        for (var i = 0; i < el.length; i++) {
            var e = el[i];
            var a = find_child(e, "rect").attributes;
            var ex = parseFloat(a.x.value);
            var ew = parseFloat(a.width.value);
            var upstack;
            // Is it an ancestor
            if (1 == 1) {
                upstack = parseFloat(a.y.value) > ymin;
            } else {
                upstack = parseFloat(a.y.value) < ymin;
            }
            if (upstack) {
                // Direct ancestor
                if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                    e.classList.add("parent");
                    zoom_parent(e);
                    update_text(e);
                }
                // not in current path
                else
                    e.classList.add("hide");
            }
            // Children maybe
            else {
                // no common path
                if (ex < xmin || ex + fudge >= xmax) {
                    e.classList.add("hide");
                }
                else {
                    zoom_child(e, xmin, ratio);
                    update_text(e);
                }
            }
        }
        search();
    }
    function unzoom() {
        unzoombtn.classList.add("hide");
        var el = document.getElementById("frames").children;
        for(var i = 0; i < el.length; i++) {
            el[i].classList.remove("parent");
            el[i].classList.remove("hide");
            zoom_reset(el[i]);
            update_text(el[i]);
        }
        search();
    }

    // search
    function toggle_ignorecase() {
        ignorecase = !ignorecase;
        if (ignorecase) {
            ignorecaseBtn.classList.add("show");
        } else {
            ignorecaseBtn.classList.remove("show");
        }
        reset_search();
        search();
    }
    function reset_search() {
        var el = document.querySelectorAll("#frames rect");
        for (var i = 0; i < el.length; i++) {
            orig_load(el[i], "fill")
        }
    }
    function search_prompt() {
        if (!searching) {
            var term = prompt("Enter a search term (regexp " +
                "allowed, eg: ^ext4_)"
                + (ignorecase ? ", ignoring case" : "")
                + "\nPress Ctrl-i to toggle case sensitivity", "");
            if (term != null) {
                currentSearchTerm = term;
                search();
            }
        } else {
            reset_search();
            searching = 0;
            currentSearchTerm = null;
            searchbtn.classList.remove("show");
            searchbtn.firstChild.nodeValue = "Search"
            matchedtxt.classList.add("hide");
            matchedtxt.firstChild.nodeValue = ""
        }
    }
    function search(term) {
        if (currentSearchTerm === null) return;
        var term = currentSearchTerm;

        var re = new RegExp(term, ignorecase ? 'i' : '');
        var el = document.getElementById("frames").children;
        var matches = new Object();
        var maxwidth = 0;
        for (var i = 0; i < el.length; i++) {
            var e = el[i];
            var func = g_to_func(e);
            var rect = find_child(e, "rect");
            if (func == null || rect == null)
                continue;

            // Save max width. Only works as we have a root frame
            var w = parseFloat(rect.attributes.width.value);
            if (w > maxwidth)
                maxwidth = w;

            if (func.match(re)) {
                // highlight
                var x = parseFloat(rect.attributes.x.value);
                orig_save(rect, "fill");
                rect.attributes.fill.value = "rgb(230,0,230)";

                // remember matches
                if (matches[x] == undefined) {
                    matches[x] = w;
                } else {
                    if (w > matches[x]) {
                        // overwrite with parent
                        matches[x] = w;
                    }
                }
                searching = 1;
            }
        }
        if (!searching)
            return;

        searchbtn.classList.add("show");
        searchbtn.firstChild.nodeValue = "Reset Search";

        // calculate percent matched, excluding vertical overlap
        var count = 0;
        var lastx = -1;
        var lastw = 0;
        var keys = Array();
        for (k in matches) {
            if (matches.hasOwnProperty(k))
                keys.push(k);
        }
        // sort the matched frames by their x location
        // ascending, then width descending
        keys.sort(function(a, b){
            return a - b;
        });
        // Step through frames saving only the biggest bottom-up frames
        // thanks to the sort order. This relies on the tree property
        // where children are always smaller than their parents.
        var fudge = 0.0001; // JavaScript floating point
        for (var k in keys) {
            var x = parseFloat(keys[k]);
            var w = matches[keys[k]];
            if (x >= lastx + lastw - fudge) {
                count += w;
                lastx = x;
                lastw = w;
            }
        }
        // display matched percent
        matchedtxt.classList.remove("hide");
        var pct = 100 * count / maxwidth;
        if (pct != 100) pct = pct.toFixed(1)
        matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
    }
]]></script><rect width="1200" height="304" x="0" y="0" fill="url(#background)"/><text id="title" x="600" y="24">Flame Graph</text><text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text><text id="search" x="1090" y="24">Search</text><text id="ignorecase" x="1174" y="24">ic</text><g id="frames"><g><title/><details>Function: [:0] (31,070 usec, 100.0%); self: 0 usec</details><rect width="1180" height="15" x="10" y="256" fill="#FAD332" rx="2" ry="2"/><rawtext/></g><g><title>chess.lua:3</title><details>Function: [chess.lua:3] (31,070 usec, 100.0%); self: 770 usec</details><rect width="1180" height="15" x="10" y="240" fill="#FB7E01" rx="2" ry="2"/><rawtext/></g><g><title>test chess.lua:510</title><details>Function: test [chess.lua:510] (30,300 usec, 97.5%); self: 0 usec</details><rect width="1150.756" height="15" x="10" y="224" fill="#F67E16" rx="2" ry="2"/><text x="13" y="234.5">test</text><rawtext>test</rawtext></g><g><title>moveList chess.lua:453</title><details>Function: moveList [chess.lua:453] (30,300 usec, 97.5%); self: 0 usec</details><rect width="1150.756" height="15" x="10" y="208" fill="#F8AA2B" rx="2" ry="2"/><text x="13" y="218.5">moveList</text><rawtext>moveList</rawtext></g><g><title>pmoves chess.lua:310</title><details>Function: pmoves [chess.lua:310] (500 usec, 1.6%); self: 0 usec</details><rect width="18.989" height="15" x="1141.767" y="192" fill="#FE7E15" rx="2" ry="2"/><rawtext>pmoves</rawtext></g><g><title>illegalyChecked chess.lua:476</title><details>Function: illegalyChecked [chess.lua:476] (28,700 usec, 92.4%); self: 300 usec</details><rect width="1089.99" height="15" x="10" y="192" fill="#EA740A" rx="2" ry="2"/><text x="13" y="202.5">illegalyChecked</text><rawtext>illegalyChecked</rawtext></g><g><title>applyMove chess.lua:490</title><details>Function: applyMove [chess.lua:490] (1,100 usec, 3.5%); self: 200 usec</details><rect width="41.777" height="15" x="1099.99" y="192" fill="#E4901C" rx="2" ry="2"/><text x="1102.99" y="202.5">app..</text><rawtext>applyMove</rawtext></g><g><title>generate chess.lua:319</title><details>Function: generate [chess.lua:319] (500 usec, 1.6%); self: 0 usec</details><rect width="18.989" height="15" x="1141.767" y="176" fill="#D90D28" rx="2" ry="2"/><rawtext>generate</rawtext></g><g><title>pmoves chess.lua:310</title><details>Function: pmoves [chess.lua:310] (27,400 usec, 88.2%); self: 100 usec</details><rect width="1040.618" height="15" x="10" y="176" fill="#FE7E15" rx="2" ry="2"/><text x="13" y="186.5">pmoves</text><rawtext>pmoves</rawtext></g><g><title>band chess.lua:125</title><details>Function: band [chess.lua:125] (200 usec, 0.6%); self: 0 usec</details><rect width="7.596" height="15" x="1077.203" y="176" fill="#EA8609" rx="2" ry="2"/><rawtext>band</rawtext></g><g><title>set chess.lua:195</title><details>Function: set [chess.lua:195] (300 usec, 1.0%); self: 0 usec</details><rect width="11.394" height="15" x="1065.809" y="176" fill="#E56414" rx="2" ry="2"/><rawtext>set</rawtext></g><g><title>ctz chess.lua:141</title><details>Function: ctz [chess.lua:141] (400 usec, 1.3%); self: 400 usec</details><rect width="15.192" height="15" x="1050.618" y="176" fill="#F19332" rx="2" ry="2"/><rawtext>ctz</rawtext></g><g><title>empty chess.lua:137</title><details>Function: empty [chess.lua:137] (100 usec, 0.3%); self: 100 usec</details><rect width="3.798" height="15" x="1084.799" y="176" fill="#FD6630" rx="2" ry="2"/><rawtext>empty</rawtext></g><g><title>updateCache chess.lua:283</title><details>Function: updateCache [chess.lua:283] (600 usec, 1.9%); self: 0 usec</details><rect width="22.787" height="15" x="1099.99" y="176" fill="#F79813" rx="2" ry="2"/><text x="1102.99" y="186.5">u..</text><rawtext>updateCache</rawtext></g><g><title>set chess.lua:195</title><details>Function: set [chess.lua:195] (100 usec, 0.3%); self: 0 usec</details><rect width="3.798" height="15" x="1122.778" y="176" fill="#E56414" rx="2" ry="2"/><rawtext>set</rawtext></g><g><title>index chess.lua:274</title><details>Function: index [chess.lua:274] (100 usec, 0.3%); self: 100 usec</details><rect width="3.798" height="15" x="1126.575" y="176" fill="#D19517" rx="2" ry="2"/><rawtext>index</rawtext></g><g><title>new chess.lua:228</title><details>Function: new [chess.lua:228] (100 usec, 0.3%); self: 0 usec</details><rect width="3.798" height="15" x="1130.373" y="176" fill="#F36101" rx="2" ry="2"/><rawtext>new</rawtext></g><g><title>move chess.lua:109</title><details>Function: move [chess.lua:109] (100 usec, 0.3%); self: 0 usec</details><rect width="3.798" height="15" x="1156.958" y="160" fill="#F2A611" rx="2" ry="2"/><rawtext>move</rawtext></g><g><title>isolate chess.lua:304</title><details>Function: isolate [chess.lua:304] (400 usec, 1.3%); self: 0 usec</details><rect width="15.192" height="15" x="1141.767" y="160" fill="#E5A500" rx="2" ry="2"/><rawtext>isolate</rawtext></g><g><title>generate chess.lua:319</title><details>Function: generate [chess.lua:319] (27,300 usec, 87.9%); self: 2,700 usec</details><rect width="1036.82" height="15" x="10" y="160" fill="#D90D28" rx="2" ry="2"/><text x="13" y="170.5">generate</text><rawtext>generate</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (200 usec, 0.6%); self: 200 usec</details><rect width="7.596" height="15" x="1077.203" y="160" fill="#F38417" rx="2" ry="2"/><rawtext>from</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (300 usec, 1.0%); self: 200 usec</details><rect width="11.394" height="15" x="1065.809" y="160" fill="#F38417" rx="2" ry="2"/><rawtext>from</rawtext></g><g><title>bor chess.lua:129</title><details>Function: bor [chess.lua:129] (600 usec, 1.9%); self: 200 usec</details><rect width="22.787" height="15" x="1099.99" y="160" fill="#E52518" rx="2" ry="2"/><text x="1102.99" y="170.5">bor</text><rawtext>bor</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (100 usec, 0.3%); self: 100 usec</details><rect width="3.798" height="15" x="1122.778" y="160" fill="#F38417" rx="2" ry="2"/><rawtext>from</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (100 usec, 0.3%); self: 100 usec</details><rect width="3.798" height="15" x="1130.373" y="160" fill="#E24218" rx="2" ry="2"/><rawtext>GC</rawtext></g><g><title>right chess.lua:101</title><details>Function: right [chess.lua:101] (100 usec, 0.3%); self: 0 usec</details><rect width="3.798" height="15" x="1156.958" y="144" fill="#FCE32F" rx="2" ry="2"/><rawtext>right</rawtext></g><g><title>map chess.lua:295</title><details>Function: map [chess.lua:295] (400 usec, 1.3%); self: 100 usec</details><rect width="15.192" height="15" x="1141.767" y="144" fill="#D6170E" rx="2" ry="2"/><rawtext>map</rawtext></g><g><title>move chess.lua:109</title><details>Function: move [chess.lua:109] (4,400 usec, 14.2%); self: 800 usec</details><rect width="167.107" height="15" x="503.724" y="144" fill="#F2A611" rx="2" ry="2"/><text x="506.724" y="154.5">move</text><rawtext>move</rawtext></g><g><title>band chess.lua:125</title><details>Function: band [chess.lua:125] (1,900 usec, 6.1%); self: 400 usec</details><rect width="72.16" height="15" x="670.83" y="144" fill="#EA8609" rx="2" ry="2"/><text x="673.83" y="154.5">band</text><rawtext>band</rawtext></g><g><title>isolate chess.lua:304</title><details>Function: isolate [chess.lua:304] (13,000 usec, 41.8%); self: 0 usec</details><rect width="493.724" height="15" x="10" y="144" fill="#E5A500" rx="2" ry="2"/><text x="13" y="154.5">isolate</text><rawtext>isolate</rawtext></g><g><title>index chess.lua:274</title><details>Function: index [chess.lua:274] (700 usec, 2.3%); self: 200 usec</details><rect width="26.585" height="15" x="845.533" y="144" fill="#D19517" rx="2" ry="2"/><text x="848.533" y="154.5">i..</text><rawtext>index</rawtext></g><g><title>down chess.lua:97</title><details>Function: down [chess.lua:97] (100 usec, 0.3%); self: 0 usec</details><rect width="3.798" height="15" x="940.48" y="144" fill="#F73215" rx="2" ry="2"/><rawtext>down</rawtext></g><g><title>left chess.lua:105</title><details>Function: left [chess.lua:105] (1,000 usec, 3.2%); self: 100 usec</details><rect width="37.979" height="15" x="742.99" y="144" fill="#D7D718" rx="2" ry="2"/><text x="745.99" y="154.5">left</text><rawtext>left</rawtext></g><g><title>up chess.lua:93</title><details>Function: up [chess.lua:93] (600 usec, 1.9%); self: 100 usec</details><rect width="22.787" height="15" x="872.118" y="144" fill="#FC6C2D" rx="2" ry="2"/><text x="875.118" y="154.5">up</text><rawtext>up</rawtext></g><g><title>right chess.lua:101</title><details>Function: right [chess.lua:101] (800 usec, 2.6%); self: 100 usec</details><rect width="30.383" height="15" x="815.15" y="144" fill="#FCE32F" rx="2" ry="2"/><text x="818.15" y="154.5">ri..</text><rawtext>right</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (500 usec, 1.6%); self: 500 usec</details><rect width="18.989" height="15" x="894.905" y="144" fill="#E24218" rx="2" ry="2"/><rawtext>GC</rawtext></g><g><title>bor chess.lua:129</title><details>Function: bor [chess.lua:129] (900 usec, 2.9%); self: 400 usec</details><rect width="34.181" height="15" x="780.969" y="144" fill="#E52518" rx="2" ry="2"/><text x="783.969" y="154.5">bor</text><rawtext>bor</rawtext></g><g><title>empty chess.lua:137</title><details>Function: empty [chess.lua:137] (400 usec, 1.3%); self: 400 usec</details><rect width="15.192" height="15" x="913.894" y="144" fill="#FD6630" rx="2" ry="2"/><rawtext>empty</rawtext></g><g><title>some chess.lua:207</title><details>Function: some [chess.lua:207] (300 usec, 1.0%); self: 200 usec</details><rect width="11.394" height="15" x="929.086" y="144" fill="#DE7319" rx="2" ry="2"/><rawtext>some</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (100 usec, 0.3%); self: 100 usec</details><rect width="3.798" height="15" x="1065.809" y="144" fill="#E24218" rx="2" ry="2"/><rawtext>GC</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (400 usec, 1.3%); self: 100 usec</details><rect width="15.192" height="15" x="1099.99" y="144" fill="#F38417" rx="2" ry="2"/><rawtext>from</rawtext></g><g><title>lshift chess.lua:164</title><details>Function: lshift [chess.lua:164] (100 usec, 0.3%); self: 0 usec</details><rect width="3.798" height="15" x="1156.958" y="128" fill="#E52936" rx="2" ry="2"/><rawtext>lshift</rawtext></g><g><title>updateCache chess.lua:283</title><details>Function: updateCache [chess.lua:283] (100 usec, 0.3%); self: 100 usec</details><rect width="3.798" height="15" x="1149.363" y="128" fill="#F79813" rx="2" ry="2"/><rawtext>updateCache</rawtext></g><g><title>chess.lua:305</title><details>Function: [chess.lua:305] (200 usec, 0.6%); self: 0 usec</details><rect width="7.596" height="15" x="1141.767" y="128" fill="#E04A2D" rx="2" ry="2"/><rawtext/></g><g><title>right chess.lua:101</title><details>Function: right [chess.lua:101] (1,800 usec, 5.8%); self: 300 usec</details><rect width="68.362" height="15" x="503.724" y="128" fill="#FCE32F" rx="2" ry="2"/><text x="506.724" y="138.5">right</text><rawtext>right</rawtext></g><g><title>up chess.lua:93</title><details>Function: up [chess.lua:93] (400 usec, 1.3%); self: 200 usec</details><rect width="15.192" height="15" x="613.862" y="128" fill="#FC6C2D" rx="2" ry="2"/><rawtext>up</rawtext></g><g><title>left chess.lua:105</title><details>Function: left [chess.lua:105] (1,100 usec, 3.5%); self: 100 usec</details><rect width="41.777" height="15" x="572.086" y="128" fill="#D7D718" rx="2" ry="2"/><text x="575.086" y="138.5">left</text><rawtext>left</rawtext></g><g><title>down chess.lua:97</title><details>Function: down [chess.lua:97] (300 usec, 1.0%); self: 200 usec</details><rect width="11.394" height="15" x="629.054" y="128" fill="#F73215" rx="2" ry="2"/><rawtext>down</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (1,500 usec, 4.8%); self: 700 usec</details><rect width="56.968" height="15" x="670.83" y="128" fill="#F38417" rx="2" ry="2"/><text x="673.83" y="138.5">from</text><rawtext>from</rawtext></g><g><title>map chess.lua:295</title><details>Function: map [chess.lua:295] (13,000 usec, 41.8%); self: 300 usec</details><rect width="493.724" height="15" x="10" y="128" fill="#D6170E" rx="2" ry="2"/><text x="13" y="138.5">map</text><rawtext>map</rawtext></g><g><title>index chess.lua:187</title><details>Function: index [chess.lua:187] (500 usec, 1.6%); self: 500 usec</details><rect width="18.989" height="15" x="845.533" y="128" fill="#E60400" rx="2" ry="2"/><rawtext>index</rawtext></g><g><title>rshift chess.lua:176</title><details>Function: rshift [chess.lua:176] (100 usec, 0.3%); self: 100 usec</details><rect width="3.798" height="15" x="940.48" y="128" fill="#EDCF33" rx="2" ry="2"/><rawtext>rshift</rawtext></g><g><title>rshift chess.lua:176</title><details>Function: rshift [chess.lua:176] (300 usec, 1.0%); self: 100 usec</details><rect width="11.394" height="15" x="758.182" y="128" fill="#EDCF33" rx="2" ry="2"/><rawtext>rshift</rawtext></g><g><title>inverse chess.lua:133</title><details>Function: inverse [chess.lua:133] (400 usec, 1.3%); self: 100 usec</details><rect width="15.192" height="15" x="742.99" y="128" fill="#E1D113" rx="2" ry="2"/><rawtext>inverse</rawtext></g><g><title>band chess.lua:125</title><details>Function: band [chess.lua:125] (200 usec, 0.6%); self: 100 usec</details><rect width="7.596" height="15" x="769.575" y="128" fill="#EA8609" rx="2" ry="2"/><rawtext>band</rawtext></g><g><title>lshift chess.lua:164</title><details>Function: lshift [chess.lua:164] (500 usec, 1.6%); self: 200 usec</details><rect width="18.989" height="15" x="872.118" y="128" fill="#E52936" rx="2" ry="2"/><rawtext>lshift</rawtext></g><g><title>band chess.lua:125</title><details>Function: band [chess.lua:125] (300 usec, 1.0%); self: 200 usec</details><rect width="11.394" height="15" x="815.15" y="128" fill="#EA8609" rx="2" ry="2"/><rawtext>band</rawtext></g><g><title>inverse chess.lua:133</title><details>Function: inverse [chess.lua:133] (300 usec, 1.0%); self: 0 usec</details><rect width="11.394" height="15" x="826.543" y="128" fill="#E1D113" rx="2" ry="2"/><rawtext>inverse</rawtext></g><g><title>lshift chess.lua:164</title><details>Function: lshift [chess.lua:164] (100 usec, 0.3%); self: 100 usec</details><rect width="3.798" height="15" x="837.937" y="128" fill="#E52936" rx="2" ry="2"/><rawtext>lshift</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (500 usec, 1.6%); self: 300 usec</details><rect width="18.989" height="15" x="780.969" y="128" fill="#F38417" rx="2" ry="2"/><rawtext>from</rawtext></g><g><title>set chess.lua:195</title><details>Function: set [chess.lua:195] (100 usec, 0.3%); self: 0 usec</details><rect width="3.798" height="15" x="929.086" y="128" fill="#E56414" rx="2" ry="2"/><rawtext>set</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (300 usec, 1.0%); self: 300 usec</details><rect width="11.394" height="15" x="1099.99" y="128" fill="#E24218" rx="2" ry="2"/><rawtext>GC</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (100 usec, 0.3%); self: 0 usec</details><rect width="3.798" height="15" x="1156.958" y="112" fill="#F38417" rx="2" ry="2"/><rawtext>from</rawtext></g><g><title>isolate chess.lua:203</title><details>Function: isolate [chess.lua:203] (200 usec, 0.6%); self: 0 usec</details><rect width="7.596" height="15" x="1141.767" y="112" fill="#D31E21" rx="2" ry="2"/><rawtext>isolate</rawtext></g><g><title>inverse chess.lua:133</title><details>Function: inverse [chess.lua:133] (200 usec, 0.6%); self: 200 usec</details><rect width="7.596" height="15" x="553.096" y="112" fill="#E1D113" rx="2" ry="2"/><rawtext>inverse</rawtext></g><g><title>lshift chess.lua:164</title><details>Function: lshift [chess.lua:164] (900 usec, 2.9%); self: 300 usec</details><rect width="34.181" height="15" x="503.724" y="112" fill="#E52936" rx="2" ry="2"/><text x="506.724" y="122.5">ls..</text><rawtext>lshift</rawtext></g><g><title>band chess.lua:125</title><details>Function: band [chess.lua:125] (400 usec, 1.3%); self: 300 usec</details><rect width="15.192" height="15" x="537.905" y="112" fill="#EA8609" rx="2" ry="2"/><rawtext>band</rawtext></g><g><title>lshift chess.lua:164</title><details>Function: lshift [chess.lua:164] (200 usec, 0.6%); self: 100 usec</details><rect width="7.596" height="15" x="613.862" y="112" fill="#E52936" rx="2" ry="2"/><rawtext>lshift</rawtext></g><g><title>rshift chess.lua:176</title><details>Function: rshift [chess.lua:176] (400 usec, 1.3%); self: 100 usec</details><rect width="15.192" height="15" x="591.075" y="112" fill="#EDCF33" rx="2" ry="2"/><rawtext>rshift</rawtext></g><g><title>inverse chess.lua:133</title><details>Function: inverse [chess.lua:133] (500 usec, 1.6%); self: 0 usec</details><rect width="18.989" height="15" x="572.086" y="112" fill="#E1D113" rx="2" ry="2"/><rawtext>inverse</rawtext></g><g><title>band chess.lua:125</title><details>Function: band [chess.lua:125] (100 usec, 0.3%); self: 0 usec</details><rect width="3.798" height="15" x="606.266" y="112" fill="#EA8609" rx="2" ry="2"/><rawtext>band</rawtext></g><g><title>rshift chess.lua:176</title><details>Function: rshift [chess.lua:176] (100 usec, 0.3%); self: 0 usec</details><rect width="3.798" height="15" x="629.054" y="112" fill="#EDCF33" rx="2" ry="2"/><rawtext>rshift</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (800 usec, 2.6%); self: 800 usec</details><rect width="30.383" height="15" x="670.83" y="112" fill="#E24218" rx="2" ry="2"/><text x="673.83" y="122.5">GC</text><rawtext>GC</rawtext></g><g><title>updateCache chess.lua:283</title><details>Function: updateCache [chess.lua:283] (3,800 usec, 12.2%); self: 500 usec</details><rect width="144.319" height="15" x="302.436" y="112" fill="#F79813" rx="2" ry="2"/><text x="305.436" y="122.5">updateCache</text><rawtext>updateCache</rawtext></g><g><title>chess.lua:305</title><details>Function: [chess.lua:305] (7,700 usec, 24.8%); self: 300 usec</details><rect width="292.436" height="15" x="10" y="112" fill="#E04A2D" rx="2" ry="2"/><rawtext/></g><g><title>new chess.lua:228</title><details>Function: new [chess.lua:228] (1,200 usec, 3.9%); self: 1,000 usec</details><rect width="45.575" height="15" x="446.756" y="112" fill="#F36101" rx="2" ry="2"/><text x="449.756" y="122.5">new</text><rawtext>new</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (200 usec, 0.6%); self: 100 usec</details><rect width="7.596" height="15" x="758.182" y="112" fill="#F38417" rx="2" ry="2"/><rawtext>from</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (300 usec, 1.0%); self: 200 usec</details><rect width="11.394" height="15" x="742.99" y="112" fill="#F38417" rx="2" ry="2"/><rawtext>from</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (100 usec, 0.3%); self: 0 usec</details><rect width="3.798" height="15" x="769.575" y="112" fill="#F38417" rx="2" ry="2"/><rawtext>from</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (300 usec, 1.0%); self: 200 usec</details><rect width="11.394" height="15" x="872.118" y="112" fill="#F38417" rx="2" ry="2"/><rawtext>from</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (100 usec, 0.3%); self: 0 usec</details><rect width="3.798" height="15" x="815.15" y="112" fill="#F38417" rx="2" ry="2"/><rawtext>from</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (300 usec, 1.0%); self: 200 usec</details><rect width="11.394" height="15" x="826.543" y="112" fill="#F38417" rx="2" ry="2"/><rawtext>from</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (200 usec, 0.6%); self: 200 usec</details><rect width="7.596" height="15" x="780.969" y="112" fill="#E24218" rx="2" ry="2"/><rawtext>GC</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (100 usec, 0.3%); self: 0 usec</details><rect width="3.798" height="15" x="929.086" y="112" fill="#F38417" rx="2" ry="2"/><rawtext>from</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (100 usec, 0.3%); self: 100 usec</details><rect width="3.798" height="15" x="1156.958" y="96" fill="#E24218" rx="2" ry="2"/><rawtext>GC</rawtext></g><g><title>some chess.lua:207</title><details>Function: some [chess.lua:207] (100 usec, 0.3%); self: 0 usec</details><rect width="3.798" height="15" x="1141.767" y="96" fill="#DE7319" rx="2" ry="2"/><rawtext>some</rawtext></g><g><title>band chess.lua:125</title><details>Function: band [chess.lua:125] (100 usec, 0.3%); self: 0 usec</details><rect width="3.798" height="15" x="1145.565" y="96" fill="#EA8609" rx="2" ry="2"/><rawtext>band</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (600 usec, 1.9%); self: 200 usec</details><rect width="22.787" height="15" x="503.724" y="96" fill="#F38417" rx="2" ry="2"/><text x="506.724" y="106.5">f..</text><rawtext>from</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (100 usec, 0.3%); self: 0 usec</details><rect width="3.798" height="15" x="537.905" y="96" fill="#F38417" rx="2" ry="2"/><rawtext>from</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (100 usec, 0.3%); self: 100 usec</details><rect width="3.798" height="15" x="613.862" y="96" fill="#F38417" rx="2" ry="2"/><rawtext>from</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (300 usec, 1.0%); self: 100 usec</details><rect width="11.394" height="15" x="591.075" y="96" fill="#F38417" rx="2" ry="2"/><rawtext>from</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (500 usec, 1.6%); self: 100 usec</details><rect width="18.989" height="15" x="572.086" y="96" fill="#F38417" rx="2" ry="2"/><rawtext>from</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (100 usec, 0.3%); self: 0 usec</details><rect width="3.798" height="15" x="606.266" y="96" fill="#F38417" rx="2" ry="2"/><rawtext>from</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (100 usec, 0.3%); self: 0 usec</details><rect width="3.798" height="15" x="629.054" y="96" fill="#F38417" rx="2" ry="2"/><rawtext>from</rawtext></g><g><title>bor chess.lua:129</title><details>Function: bor [chess.lua:129] (2,900 usec, 9.3%); self: 900 usec</details><rect width="110.138" height="15" x="302.436" y="96" fill="#E52518" rx="2" ry="2"/><text x="305.436" y="106.5">bor</text><rawtext>bor</rawtext></g><g><title>inverse chess.lua:133</title><details>Function: inverse [chess.lua:133] (400 usec, 1.3%); self: 100 usec</details><rect width="15.192" height="15" x="412.575" y="96" fill="#E1D113" rx="2" ry="2"/><rawtext>inverse</rawtext></g><g><title>isolate chess.lua:203</title><details>Function: isolate [chess.lua:203] (7,400 usec, 23.8%); self: 700 usec</details><rect width="281.043" height="15" x="10" y="96" fill="#D31E21" rx="2" ry="2"/><text x="13" y="106.5">isolate</text><rawtext>isolate</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (200 usec, 0.6%); self: 200 usec</details><rect width="7.596" height="15" x="446.756" y="96" fill="#E24218" rx="2" ry="2"/><rawtext>GC</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (100 usec, 0.3%); self: 100 usec</details><rect width="3.798" height="15" x="758.182" y="96" fill="#E24218" rx="2" ry="2"/><rawtext>GC</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (100 usec, 0.3%); self: 100 usec</details><rect width="3.798" height="15" x="742.99" y="96" fill="#E24218" rx="2" ry="2"/><rawtext>GC</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (100 usec, 0.3%); self: 100 usec</details><rect width="3.798" height="15" x="769.575" y="96" fill="#E24218" rx="2" ry="2"/><rawtext>GC</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (100 usec, 0.3%); self: 100 usec</details><rect width="3.798" height="15" x="872.118" y="96" fill="#E24218" rx="2" ry="2"/><rawtext>GC</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (100 usec, 0.3%); self: 100 usec</details><rect width="3.798" height="15" x="815.15" y="96" fill="#E24218" rx="2" ry="2"/><rawtext>GC</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (100 usec, 0.3%); self: 100 usec</details><rect width="3.798" height="15" x="826.543" y="96" fill="#E24218" rx="2" ry="2"/><rawtext>GC</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (100 usec, 0.3%); self: 100 usec</details><rect width="3.798" height="15" x="929.086" y="96" fill="#E24218" rx="2" ry="2"/><rawtext>GC</rawtext></g><g><title>set chess.lua:195</title><details>Function: set [chess.lua:195] (100 usec, 0.3%); self: 0 usec</details><rect width="3.798" height="15" x="1141.767" y="80" fill="#E56414" rx="2" ry="2"/><rawtext>set</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (100 usec, 0.3%); self: 0 usec</details><rect width="3.798" height="15" x="1145.565" y="80" fill="#F38417" rx="2" ry="2"/><rawtext>from</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (400 usec, 1.3%); self: 400 usec</details><rect width="15.192" height="15" x="503.724" y="80" fill="#E24218" rx="2" ry="2"/><rawtext>GC</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (100 usec, 0.3%); self: 100 usec</details><rect width="3.798" height="15" x="537.905" y="80" fill="#E24218" rx="2" ry="2"/><rawtext>GC</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (200 usec, 0.6%); self: 200 usec</details><rect width="7.596" height="15" x="591.075" y="80" fill="#E24218" rx="2" ry="2"/><rawtext>GC</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (400 usec, 1.3%); self: 400 usec</details><rect width="15.192" height="15" x="572.086" y="80" fill="#E24218" rx="2" ry="2"/><rawtext>GC</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (100 usec, 0.3%); self: 100 usec</details><rect width="3.798" height="15" x="606.266" y="80" fill="#E24218" rx="2" ry="2"/><rawtext>GC</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (100 usec, 0.3%); self: 100 usec</details><rect width="3.798" height="15" x="629.054" y="80" fill="#E24218" rx="2" ry="2"/><rawtext>GC</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (2,000 usec, 6.4%); self: 1,100 usec</details><rect width="75.958" height="15" x="302.436" y="80" fill="#F38417" rx="2" ry="2"/><text x="305.436" y="90.5">from</text><rawtext>from</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (300 usec, 1.0%); self: 0 usec</details><rect width="11.394" height="15" x="412.575" y="80" fill="#F38417" rx="2" ry="2"/><rawtext>from</rawtext></g><g><title>some chess.lua:207</title><details>Function: some [chess.lua:207] (4,100 usec, 13.2%); self: 1,000 usec</details><rect width="155.713" height="15" x="10" y="80" fill="#DE7319" rx="2" ry="2"/><text x="13" y="90.5">some</text><rawtext>some</rawtext></g><g><title>band chess.lua:125</title><details>Function: band [chess.lua:125] (2,600 usec, 8.4%); self: 900 usec</details><rect width="98.745" height="15" x="165.713" y="80" fill="#EA8609" rx="2" ry="2"/><text x="168.713" y="90.5">band</text><rawtext>band</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (100 usec, 0.3%); self: 100 usec</details><rect width="3.798" height="15" x="1141.767" y="64" fill="#F38417" rx="2" ry="2"/><rawtext>from</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (100 usec, 0.3%); self: 100 usec</details><rect width="3.798" height="15" x="1145.565" y="64" fill="#E24218" rx="2" ry="2"/><rawtext>GC</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (900 usec, 2.9%); self: 900 usec</details><rect width="34.181" height="15" x="302.436" y="64" fill="#E24218" rx="2" ry="2"/><text x="305.436" y="74.5">GC</text><rawtext>GC</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (300 usec, 1.0%); self: 300 usec</details><rect width="11.394" height="15" x="412.575" y="64" fill="#E24218" rx="2" ry="2"/><rawtext>GC</rawtext></g><g><title>set chess.lua:195</title><details>Function: set [chess.lua:195] (3,100 usec, 10.0%); self: 1,500 usec</details><rect width="117.734" height="15" x="10" y="64" fill="#E56414" rx="2" ry="2"/><text x="13" y="74.5">set</text><rawtext>set</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (1,700 usec, 5.5%); self: 800 usec</details><rect width="64.564" height="15" x="165.713" y="64" fill="#F38417" rx="2" ry="2"/><text x="168.713" y="74.5">from</text><rawtext>from</rawtext></g><g><title>from chess.lua:75</title><details>Function: from [chess.lua:75] (1,600 usec, 5.1%); self: 1,000 usec</details><rect width="60.766" height="15" x="10" y="48" fill="#F38417" rx="2" ry="2"/><text x="13" y="58.5">from</text><rawtext>from</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (900 usec, 2.9%); self: 900 usec</details><rect width="34.181" height="15" x="165.713" y="48" fill="#E24218" rx="2" ry="2"/><text x="168.713" y="58.5">GC</text><rawtext>GC</rawtext></g><g><title>GC</title><details>Function: GC [GC:0] (600 usec, 1.9%); self: 600 usec</details><rect width="22.787" height="15" x="10" y="32" fill="#E24218" rx="2" ry="2"/><text x="13" y="42.5">GC</text><rawtext>GC</rawtext></g></g></svg>